---
# Tasks for managing user SSH configuration

- name: Ensure .ssh directory exists for users
  become: true
  ansible.builtin.file:
    path: "{{ item.home | default('/home/' + item.username) }}/.ssh"
    state: directory
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username) }}"
    mode: "{{ item.ssh.dir_mode | default('0700') }}"
  loop: "{{ users }}"
  when: 
    - item.state | default('present') == 'present'
    - item.ssh is defined
    - item.ssh.enabled | default(true) | bool

- name: Manage authorized_keys files for users with direct key content
  become: true
  ansible.builtin.template:
    src: authorized_keys.j2
    dest: "{{ item.home | default('/home/' + item.username) }}/.ssh/authorized_keys"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username) }}"
    mode: "{{ item.ssh.authorized_keys_mode | default('0600') }}"
  loop: "{{ users }}"
  when:
    - item.state | default('present') == 'present'
    - item.ssh is defined
    - item.ssh.enabled | default(true) | bool
    - item.ssh.authorized_keys is defined
    - (item.ssh.authorized_keys | selectattr('key', 'defined') | list | length > 0) or
      (item.ssh.authorized_keys | selectattr('content', 'defined') | list | length > 0)

- name: Copy SSH public key files for users
  become: true
  ansible.builtin.copy:
    src: "{{ item.1.src }}"
    dest: "{{ item.0.home | default('/home/' + item.0.username) }}/.ssh/authorized_keys"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.group | default(item.0.username) }}"
    mode: "{{ item.0.ssh.authorized_keys_mode | default('0600') }}"
    validate: "ssh-keygen -l -f %s"
  loop: "{{ users | subelements('ssh.authorized_keys', skip_missing=True) }}"
  when:
    - item.0.state | default('present') == 'present'
    - item.0.ssh is defined
    - item.0.ssh.enabled | default(true) | bool
    - item.1.src is defined

- name: Configure SSH client for users
  become: true
  ansible.builtin.template:
    src: ssh_config.j2
    dest: "{{ item.home | default('/home/' + item.username) }}/.ssh/config"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username) }}"
    mode: "{{ item.ssh.config.config_mode | default('0600') }}"
  loop: "{{ users }}"
  when:
    - item.state | default('present') == 'present'
    - item.ssh is defined
    - item.ssh.enabled | default(true) | bool
    - item.ssh.config is defined
    - item.ssh.config.enabled | default(false) | bool
